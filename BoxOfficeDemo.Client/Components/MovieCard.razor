@inherits CustomComponentBase

<style>
    .zooming {
        transition: transform .2s;
    }

        .zooming:hover {
            transition: transform .2s;
            transform: scale(1.1);
        }

    .image-card {
        width: 100%;
    }

        .image-card img {
            border-radius: 20px;
            height: 400px;
        }
</style>
@if (Index)
{
    <div class="card zooming m-1 @Theme.BackColor @Theme.BorderColor" style="border-radius:20px">
        <div class="card-header @Theme.BorderColor" style="border-radius:20px">
            <div class="row">
                <div class="d-inline-flex col-9 col-sm-9 m-auto p-0">
                    <h5 class="m-1" data-toggle="tooltip" data-placement="top" title="@MovieNameTooltip"><strong>@MovieName</strong></h5>
                </div>
                <div class="d-inline-flex col-3 col-sm-3 text-center m-auto p-0">
                    <h4 class="m-1">
                        <span class="bi-star-fill" style="margin:0 5px;padding:0;color:gold;"></span>
                        @Rate
                    </h4>
                </div>
            </div>
        </div>
        <a class="image-card" href="#" @onclick="@(()=> NavigateToPage("Movies",MovieID))" @onclick:preventDefault>
            <img class="card-img-top" src="@Image" alt="@MovieNameTooltip image card">
        </a>
        <div class="card-body">
            <h5>Released: @(ReleasedDate == null ? "" : ((DateTime)ReleasedDate).ToString(DateFormat))</h5>
            <h5>@Genere  PG-@ParentalGuide @(Length == null ? "" : ((TimeSpan)Length).ToString(TimeFormat, Culture))</h5>
            <div class="text-center">
                <button @onclick="async ()=> await AddToWatchList()" class="btn btn-outline-primary" style="border-radius: 15px;">
                    <span class="bi-plus-lg"></span>
                    Watchlist
                </button>
            </div>

        </div>
    </div>
}
else
{
    <div class="card zooming m-1 @Theme.BackColor @Theme.BorderColor" style="border-radius:20px">
        <div class="card-header @Theme.BorderColor" style="border-radius:20px">
            <div class="row">
                <div class="d-inline-flex col-6 col-xl-10 col-md-9 col-sm-8 m-auto p-0">
                    <h5 class="m-1" data-toggle="tooltip" data-placement="top" title="@MovieNameTooltip"><strong>@MovieName</strong></h5>
                </div>
                <div class="d-inline-flex col-6 col-xl-2 col-md-3 col-sm-4 text-center m-auto p-0">
                    <button @onclick="async ()=> await AddToWatchList()" class="btn btn-outline-primary m-auto" style="border-radius: 15px;">
                        <span class="bi-plus-lg"></span>
                        Watchlist
                    </button>
                    <h4 class="m-1">
                        <span class="bi-star-fill" style="margin:0 5px;padding:0;color:gold;"></span>
                        @Rate
                    </h4>
                </div>
            </div>
        </div>
        <div class="card-body row justify-content-center p-0 m-0">
            <div class="col-12 col-md-auto image-card p-0">
                <img class="card-img-top" src="@Image" alt="@MovieNameTooltip image card">
            </div>
            <div class="col m-2">
                <h5>Released: @(ReleasedDate == null ? "" : ((DateTime)ReleasedDate).ToString(DateFormat))</h5>
                <h5>@Genere  PG-@ParentalGuide @(Length == null ? "" : ((TimeSpan)Length).ToString(TimeFormat, Culture))</h5>
                @Description
            </div>
        </div>
        <div class="card-footer @Theme.BorderColor" style="border-radius: 20px;">
            @Reviews
            <AuthorizeView>
                <Authorized Context="Auth">
                    @ReviewForm
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
}

@code {
    [Parameter]
    public decimal? MovieID { get; set; }
    [Parameter]
    public string? MovieName { get; set; }
    [Parameter]
    public string? MovieNameTooltip { get; set; }
    [Parameter]
    public string? Image { get; set; }
    [Parameter]
    public DateTime? ReleasedDate { get; set; }
    [Parameter]
    public int? ParentalGuide { get; set; }
    [Parameter]
    public TimeSpan? Length { get; set; }
    [Parameter]
    public string? Genere { get; set; }
    [Parameter]
    public decimal? Rate { get; set; }

    [Parameter]
    public RenderFragment? Description { get; set; }

    [Parameter]
    public RenderFragment? Reviews { get; set; }

    [Parameter]
    public RenderFragment? ReviewForm { get; set; }

    [Parameter]
    public EventCallback<SingleWatchList> AddWatchList { get; set; }

    [Parameter]
    public bool Index { get; set; }

    public async Task AddToWatchList()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            SingleWatchList watchList = new()
                {
                    Id = new GenerateNewID().GetNewID,
                    MovieID = (decimal)MovieID,
                    MovieName = MovieName,
                    UserID = LoggedUser.Id,
                    AddedDate = DateTime.Now
                };

            await AddWatchList.InvokeAsync(watchList);
        }
        else
            ToastService.ShowInfo("Please Login first!");

    }

    public void NavigateToMovie(decimal? id, bool Form)
    {
        if (Form)
            NavigationManager.NavigateTo($"/BoxOfficeDemo/Movie/{id}");
        else
            NavigationManager.NavigateTo($"/BoxOfficeDemo/Movies/{id.ToString().Replace('.', 'O')}");
    }
}
