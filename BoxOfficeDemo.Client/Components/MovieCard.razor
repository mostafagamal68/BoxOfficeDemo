@inherits CustomComponentBase

@if (Index)
{
    <div class="roundedcorner card shadow zooming m-1 @Theme.BackColor @Theme.BorderColor">
        <div class="roundedcorner card-header @Theme.BorderColor">
            <div class="d-flex justify-content-between">
                <h5 class="my-auto me-1" data-toggle="tooltip" data-placement="top" title="@MovieNameTooltip"><strong>@MovieName</strong></h5>
                <div class="flex-column ms-1">
                    <h4 class="bi-star-fill my-0 px-1" style="color:gold;"></h4>
                    <h4 class="my-0">@Rate</h4>
                </div>
            </div>
        </div>
        <a class="image-card" href="#" @onclick="@(()=> NavigateToPage("BoxOfficeDemo/Movies",MovieID))" @onclick:preventDefault>
            <img class="card-img-top" src="@Image" alt="@MovieNameTooltip image card">
        </a>
        <div class="card-body">
            <h5>Released: @(ReleasedDate == null ? "" : ((DateTime)ReleasedDate).ToString(DateFormat))</h5>
            <h5>@Genere  PG-@ParentalGuide @(Length == null ? "" : ((TimeSpan)Length).ToString(TimeFormat, Culture))</h5>
            <div class="text-center">
                <CustomBtn Classes="@("btn-outline-primary")"
                           ClickAction="AddToWatchList"
                           Text="@("Watchlist")">
                    <SpanIcon>
                        <span class="bi-plus-lg"></span>
                    </SpanIcon>
                </CustomBtn>
            </div>

        </div>
    </div>
}
else
{
    <div class="card shadow-sm m-3 mt-0 roundedcorner @Theme.BackColor @Theme.BorderColor">
        <div class="card-header roundedcorner @Theme.BorderColor">
            <div class="d-flex justify-content-between">
                <h5 class="my-auto" data-toggle="tooltip" data-placement="top" title="@MovieNameTooltip"><strong>@MovieName</strong></h5>
                <div class="d-flex text-end">
                    <CustomBtn Classes="@("btn-outline-primary mx-2")"
                               ClickAction="AddToWatchList"
                               data-toggle="tooltip" data-placement="top" title="Add to watch list">
                        <SpanIcon>
                            <span class="bi-plus-lg"></span>
                        </SpanIcon>
                    </CustomBtn>
                    <h4 class="my-auto">
                        <span class="bi-star-fill my-0 px-1" style="color:gold;"></span>
                        @Rate
                    </h4>
                </div>
            </div>
        </div>
        <div class="card-body row justify-content-center p-0 m-0">
            <div class="col-12 col-md-auto image-card p-0">
                <img class="card-img-top" src="@Image" alt="@MovieNameTooltip image card">
            </div>
            <div class="col m-2">
                <h5>Released: @(ReleasedDate == null ? "" : ((DateTime)ReleasedDate).ToString(DateFormat))</h5>
                <h5>@Genere  PG-@ParentalGuide @(Length == null ? "" : ((TimeSpan)Length).ToString(TimeFormat, Culture))</h5>
                @Description
            </div>
        </div>
        <div class="card-footer roundedcorner @Theme.BorderColor">
            @Reviews
            <AuthorizeView>
                <Authorized Context="Auth">
                    @ReviewForm
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
}

@code {
    [Parameter]
    public decimal? MovieID { get; set; }
    [Parameter]
    public string? MovieName { get; set; }
    [Parameter]
    public string? MovieNameTooltip { get; set; }
    [Parameter]
    public string? Image { get; set; }
    [Parameter]
    public DateTime? ReleasedDate { get; set; }
    [Parameter]
    public int? ParentalGuide { get; set; }
    [Parameter]
    public TimeSpan? Length { get; set; }
    [Parameter]
    public string? Genere { get; set; }
    [Parameter]
    public decimal? Rate { get; set; }

    [Parameter]
    public RenderFragment? Description { get; set; }

    [Parameter]
    public RenderFragment? Reviews { get; set; }

    [Parameter]
    public RenderFragment? ReviewForm { get; set; }

    [Parameter]
    public EventCallback<SingleWatchList> AddWatchList { get; set; }

    [Parameter]
    public bool Index { get; set; }

    public async Task AddToWatchList()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            SingleWatchList watchList = new()
                {
                    Id = new GenerateNewID().GetNewID,
                    MovieID = (decimal)MovieID,
                    MovieName = MovieName,
                    UserID = LoggedUser.Id,
                    AddedDate = DateTime.Now
                };

            await AddWatchList.InvokeAsync(watchList);
        }
        else
            ToastService.ShowInfo("Please Login first!");
    }

    public void NavigateToMovie(decimal? id, bool Form)
    {
        if (Form)
            NavigationManager.NavigateTo($"/BoxOfficeDemo/Movie/{id.ToIdString()}");
        else
            NavigationManager.NavigateTo($"/BoxOfficeDemo/Movies/{id.ToIdString()}");
    }
}
