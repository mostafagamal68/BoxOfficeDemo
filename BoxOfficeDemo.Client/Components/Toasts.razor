@using BoxOfficeDemo.Client.Configurations.Toast;
@using System.Timers;
@inject IToastService ToastService

@if(ToastList.Any())
{
    <div class="blazored-toast-container @PositionClass">
        <CascadingValue Value=this>
            @foreach (var toast in ToastList.OrderBy(o=>o.TimeStamp))
            {
                <Toast ToastSettings="toast.ToastSettings" ToastId="toast.Id"/>
            }
        </CascadingValue>
    </div>
}

@code {
    [Parameter] 
    public string InfoClass { get; set; }
    [Parameter]
    public string InfoIconClass { get; set; }
    [Parameter] 
    public string SuccessClass { get; set; }
    [Parameter]
    public string SuccessIconClass { get; set; }
    [Parameter] 
    public string WarningClass { get; set; }
    [Parameter] 
    public string WarningIconClass { get; set; }
    [Parameter] 
    public string ErrorClass { get; set; }
    [Parameter] 
    public string ErrorIconClass { get; set; }
    [Parameter] 
    public ToastPosition Position { get; set; } = ToastPosition.TopRight;
    [Parameter] 
    public int Timeout { get; set; } = 5;

    private string PositionClass { get; set; } = string.Empty;

    internal List<ToastInstance> ToastList { get; set; } = new List<ToastInstance>();

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
        PositionClass = $"position-{Position.ToString().ToLower()}";
    }

    public void RemoveToast(Guid toastId)
    {
        InvokeAsync(() =>
        {
            var toastInstance = ToastList.SingleOrDefault(x => x.Id == toastId);
            ToastList.Remove(toastInstance);
            StateHasChanged();
        });
    }

    private ToastSettings BuildToastSettings(ToastLevel level,string message,string heading)
    {
        switch (level)
        {
            case ToastLevel.Success:
                return new ToastSettings(string.IsNullOrEmpty(heading) ? "Success" : heading, message,"blazored-toast-success",SuccessClass,SuccessIconClass);
            case ToastLevel.Warning:
                return new ToastSettings(string.IsNullOrEmpty(heading) ? "Warning" : heading, message,"blazored-toast-warning",WarningClass,WarningIconClass);
            case ToastLevel.Error:
                return new ToastSettings(string.IsNullOrEmpty(heading) ? "Error" : heading, message,"blazored-toast-error",ErrorClass,ErrorIconClass);
            case ToastLevel.Information:
                return new ToastSettings(string.IsNullOrEmpty(heading) ? "Info" : heading, message,"blazored-toast-info",InfoClass,InfoIconClass);
        }
        throw new InvalidOperationException();
    }    ﻿

    private void ShowToast (ToastLevel level, string message, string heading)
    {
        InvokeAsync(() =>
        {
            var settings = BuildToastSettings(level, message, heading);
            var toast = new ToastInstance
            {
                Id = Guid.NewGuid(),
                TimeStamp = DateTime.Now,
                ToastSettings = settings
            };
            ToastList.Add(toast);
            if(level != ToastLevel.Error)
            {                
                var timeout = Timeout * 1000;
                var toastTimer = new Timer(timeout);

                toastTimer.Elapsed += (sender, args) => { RemoveToast (toast.Id); };
                toastTimer.AutoReset = false;
                toastTimer.Start();
            }
            StateHasChanged();
        });
    }
}
