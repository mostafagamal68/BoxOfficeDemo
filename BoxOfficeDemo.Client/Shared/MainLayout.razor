@using BoxOfficeDemo.Client.Configurations.Toast;
@inject IWatchListService WatchListService
@inject IModalService ModalService
@inject IJSRuntime JS
@inherits LayoutComponentBase

<Toasts Position="ToastPosition.BottomLeft"
        Timeout="3"
        SuccessClass="success-toast-override"
        SuccessIconClass="fa fa-thumbs-up"
        ErrorIconClass="fa fa-bug" />

<div class="page">
    <div class="sidebar">
        <NavMenu HideSideBar="ToggleSidebar" />
    </div>

    <main>
        <div class="top-row">
            <div class="col brand-name">
                <button class="btn btn-outline-primary px-2 py-1" @onclick="ToggleSidebar">
                    <span class="bi bi-list"></span>
                </button>
                <a class="navbar-brand m-auto text-center align-middle" href="/">Box Office</a>
            </div>

            <div class="col-6 col-md-6 col-sm-8 text-end">
                <AuthLinks />
                <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
            </div>
            <AuthorizeView>
                <Authorized>
                    <div class="col-6 col-xl-2 col-md-3 col-sm-4 text-center">
                        <WatchListNotify ShowWatchList="@(()=> ModalService.Show<MyWatchList>("My Watch List", new ModalOptions{ActivateFocusTrap=false, Position=ModalPosition.TopRight, AnimationType=ModalAnimationType.FadeInOut}))"></WatchListNotify>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            <CascadingValue Value="_DateFormat" Name="DateFormat">
                <CascadingValue Value="_TimeFormat" Name="TimeFormat">
                    <CascadingValue Value="_Culture" Name="Culture">
                        @Body
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </article>
    </main>
</div>

@code {
    string _DateFormat = "dd/MM/yyyy";
    string _TimeFormat = "hh\\:mm";
    public bool ToggleWatchLater { get; set; } = false;
    public bool IsLoading { get; set; }
    IFormatProvider _Culture = System.Globalization.CultureInfo.InvariantCulture;

    private bool collapseSidebar = true;
    private string? hiddenSidebar => collapseSidebar ? "hidden" : "visible";

    private async Task ToggleSidebar()
    {
        collapseSidebar = !collapseSidebar;
        await JS.InvokeVoidAsync("ToggleSidebar", collapseSidebar);
    }
}
