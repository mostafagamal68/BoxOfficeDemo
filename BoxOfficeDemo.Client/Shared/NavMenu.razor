@inherits CustomComponentBase

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Box Office</a>
        <button title="Close" class="navbar-close btn btn-close" @onclick="CloseSidebar"></button>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-box" aria-hidden="true"></span> Box Office
            </NavLink>
        </div>
        <AuthorizeView Roles="Administrator">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Movies">
                        <span class="oi oi-media-play" aria-hidden="true"></span> Movies
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>
        <div class="nav-item px-3">
            <select class="form-select" value="@SelectedTheme" @onchange="ThemeChanged">
                <option value="@(Themes.Light)">Light</option>
                <option value="@(Themes.Dark)">Dark</option>
                <option value="@(Themes.Amoled)">Amoled</option>
            </select>
        </div>
    </nav>
</div>

@code {
    [Parameter]
    public EventCallback<bool> HideSideBar { get; set; }
    private bool collapseNavMenu = true;
    private string SelectedTheme { get; set; }
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    enum Themes
    {
        Light,
        Dark,
        Amoled
    }
    protected override async Task OnInitializedAsync()
    {
        SelectedTheme = await localStorage.GetItemAsync<string>("Theme");
        await ToggleTheme(SelectedTheme);
        await CloseSidebar();
        //await JS.InvokeVoidAsync("ToggleTheme", SelectedTheme);
    }
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private async Task ThemeChanged(ChangeEventArgs e)
    {
        await ToggleTheme((string?)e.Value);
        await localStorage.SetItemAsync("Theme", e.Value);
    }

    //await JS.InvokeVoidAsync("ToggleTheme", e.Value);


    private async Task ToggleTheme(string? themeName)
    {
        if (themeName == "Dark")
        {
            Theme.ThemeName = "dark-mode";
            Theme.BorderColor = "border-secondary";
            Theme.BackColor = "bg-dark";
        }
        else if (themeName == "Amoled")
        {
            Theme.ThemeName = "black-mode";
            Theme.BorderColor = "border-secondary";
            Theme.BackColor = "bg-black";
        }
        else
        {
            Theme.ThemeName = "";
            Theme.BorderColor = "";
            Theme.BackColor = "";
        }
        StateHasChanged();
        await CloseSidebar();

    }
    private async Task CloseSidebar() => await HideSideBar.InvokeAsync(false);

}
