@page "/BoxOfficeDemo/registration"
@page "/registration"
@inject IAuthenticationService AuthenticationService
@inherits CustomComponentBase

@if (ShowRegistrationErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
            <p>@error</p>
        }
    </div>
}
<div class="card @Theme.BackColor" style="border-radius:20px;">
    <EditForm Model="_userForRegistration" OnValidSubmit="Register">
        <DataAnnotationsValidator />
        <div class="card-body">
            <div class="form-group row">
                <label for="firstname" class="col-sm-3 col-form-label my-2">First Name:</label>
                <div class="col-sm-9">
                    <InputText id="firstname" class=@($"form-control {Theme.BackColor} {Theme.FontColor} my-2 d-inline") @bind-Value="_userForRegistration.FirstName" />
                    <ValidationMessage For="@(() => _userForRegistration.FirstName)" style="display:inline;margin:0px 10px" />
                </div>
            </div>
            <div class="form-group row">
                <label for="lastname" class="col-sm-3 col-form-label my-2">Last Name:</label>
                <div class="col-sm-9">
                    <InputText id="lastname" class=@($"form-control {Theme.BackColor} {Theme.FontColor} my-2 d-inline") @bind-Value="_userForRegistration.LastName" />
                    <ValidationMessage For="@(() => _userForRegistration.LastName)" style="display:inline;margin:0px 10px" />
                </div>
            </div>
            <div class="form-group row">
                <label for="username" class="col-sm-3 col-form-label my-2">User Name:</label>
                <div class="col-sm-9">
                    <InputText id="username" class=@($"form-control {Theme.BackColor} {Theme.FontColor} my-2 d-inline") @bind-Value="_userForRegistration.UserName" />
                    <ValidationMessage For="@(() => _userForRegistration.UserName)" style="display:inline;margin:0px 10px" />
                </div>
            </div>
            <div class="form-group row">
                <label for="email" class="col-sm-3 col-form-label my-2">Email:</label>
                <div class="col-sm-9">
                    <InputText id="email" class=@($"form-control {Theme.BackColor} {Theme.FontColor} my-2 d-inline") @bind-Value="_userForRegistration.Email" />
                    <ValidationMessage For="@(() => _userForRegistration.Email)" style="display:inline;margin:0px 10px" />
                </div>
            </div>

            <div class="form-group row">
                <label for="password" class="col-sm-3 col-form-label my-2">Password:</label>
                <div class="col-sm-9">
                    <InputText type="password" id="password" class=@($"form-control {Theme.BackColor} {Theme.FontColor} my-2 d-inline") @bind-Value="_userForRegistration.Password" />
                    <ValidationMessage For="@(() => _userForRegistration.Password)" style="display:inline;margin:0px 10px" />
                </div>
            </div>

            <div class="form-group row">
                <label for="confirm" class="col-sm-3 col-form-label my-2">Confirm Password:</label>
                <div class="col-sm-9">
                    <InputText type="password" id="confirm" class=@($"form-control {Theme.BackColor} {Theme.FontColor} my-2 d-inline") @bind-Value="_userForRegistration.ConfirmPassword" />
                    <ValidationMessage For="@(() => _userForRegistration.ConfirmPassword)" style="display:inline;margin:0px 10px" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-12 text-right">
                    <button type="submit" class="btn btn-success">Register</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>
@code {
    private UserForRegistrationDto _userForRegistration = new();
    public bool ShowRegistrationErrors { get; set; }
    public IEnumerable<string> Errors { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/BoxOfficeDemo");
        }
        base.OnInitialized();
    }

    public async Task Register()
    {
        ShowRegistrationErrors = false;
        var result = await AuthenticationService.RegisterUser(_userForRegistration);
        if (!result.IsSuccessfulRegistration)
        {
            Errors = result.Errors;
            ShowRegistrationErrors = true;
        }
        else
        {
            NavigationManager.NavigateTo("/BoxOfficeDemo",true);
        }
    }
}
