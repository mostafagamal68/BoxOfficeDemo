@page "/BoxOfficeDemo/login"
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject CurrentSession CurrentUser
<h3>Login</h3>

@if (ShowAuthError)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
        @if (EmailIsNotConfirmed)
        {
            <a href="VerifyEmail/@UserID"> click here to verify your email</a>
        }
    </div>
}

<EditForm Model="_userForAuthentication" OnValidSubmit="ExecuteLogin" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="email" class="col-sm-3 col-form-label my-2">Email:</label>
        <div class="col-sm-9">
            <InputText id="email" class="form-control my-2 d-inline" @bind-Value="_userForAuthentication.Email" />
            <ValidationMessage For="@(() => _userForAuthentication.Email)" style="display:inline;margin:0px 10px"/>
        </div>
    </div>

    <div class="form-group row">
        <label for="password" class="col-sm-3 col-form-label my-2">Password:</label>
        <div class="col-sm-9">
            <InputText type="password" id="password" class="form-control my-2 d-inline" @bind-Value="_userForAuthentication.Password" />
            <ValidationMessage For="@(() => _userForAuthentication.Password)" style="display:inline;margin:0px 10px"/>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Login</button>
        </div>
    </div>
</EditForm>

@code {
    UserForAuthenticationDto _userForAuthentication = new();
    UserForLoginDto _userInfo = new();
    bool ShowAuthError { get; set; }
    string Error { get; set; }
    bool EmailIsNotConfirmed { get; set; } = false;
    string UserID { get; set; }

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await AuthStat).User;
        if (user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        base.OnInitialized();
    }
    async Task ExecuteLogin()
    {
        ShowAuthError = false;
        var result = await AuthenticationService.Login(_userForAuthentication);
        if (!result.IsAuthSuccessful)
        {
            Error = result.ErrorMessage;
            ShowAuthError = true;
        }
        else if (!result.VerifiedEmail)
        {
            Error = result.ErrorMessage;
            EmailIsNotConfirmed = true;
            UserID = result.UserID;
            ShowAuthError = true;
        }
        else
        {
            if(!string.IsNullOrEmpty(result.UserID))
            {
                LoggedUser.Id = result.UserID;
                _userInfo = await AuthenticationService.GetCurrentUserInfo(result.UserID);
                if(_userInfo != null)
                {
                    CurrentUser.Set("Name", $"{_userInfo.FirstName} {_userInfo.LastName}");
                    CurrentUser.Set("UserName", _userInfo.UserName);
                    CurrentUser.Set("Email", _userInfo.Email);
                }
            }
            NavigationManager.NavigateTo("/BoxOfficeDemo/");
        }
    }
}
