@page "/Movie"
@page "/Movie/{id}"
@page "/BoxOfficeDemo/Movie"
@page "/BoxOfficeDemo/Movie/{id}"
@inject IMoviesService MoviesService
@inherits CustomComponentBase

<Loader Toggle="IsLoading"></Loader>
<div class="card shadow-sm m-3 mt-0 @Theme.BackColor @Theme.BorderColor" style="border-radius: 20px;">
    <div class="card-header @Theme.BorderColor" style="border-radius: 20px;">
        <div class="row">
            <h3 class="col-6">@(!string.IsNullOrEmpty(Movie.MovieName) ? $"{Movie.MovieName} Form" : "New Movie")</h3>
            <a class="col-6 my-auto text-end" href="/BoxOfficeDemo/Movies"><span class="bi bi-arrow-left-circle-fill"></span></a>
        </div>
    </div>
    <div class="card-body col-md-6" style="border-radius: 20px;">
        <AuthorizeView Roles="Administrator">
            <Authorized Context="Auth">
                <EditForm Model="Movie" OnValidSubmit="Save">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <strong class="col-form-label my-1">Movie Name</strong>
                    <InputText class=@($"form-control my-2 {Theme.BackColor} {Theme.FontColor}") @bind-Value="Movie.MovieName" />
                    <strong class="col-form-label my-1">Description</strong>
                    <InputTextArea class=@($"form-control my-2 {Theme.BackColor} {Theme.FontColor}" ) @bind-Value="Movie.Description" />
                    <strong class="col-form-label my-1">ReleasedDate</strong>
                    <InputDate class=@($"form-control my-2 {Theme.BackColor} {Theme.FontColor}" ) @bind-Value="Movie.ReleasedDate" />
                    <strong class="col-form-label my-1">Genere</strong>
                    <InputSelect class=@($"form-select my-2 {Theme.BackColor} {Theme.FontColor}" ) @bind-Value="Movie.Genere">
                        <option value="" selected disabled hidden>Click and Choose here</option>
                        <option value="Horror">Horror</option>
                        <option value="Drama">Drama</option>
                        <option value="Sc-Fi">Sc-Fi</option>
                        <option value="Action">Action</option>
                        <option value="Romance">Romance</option>
                    </InputSelect>
                    <strong class="col-form-label my-1">Parental Guide</strong>
                    <InputNumber class=@($"form-control my-2 {Theme.BackColor} {Theme.FontColor}" ) @bind-Value="Movie.ParentalGuide" />
                    <strong class="col-form-label my-1">Length</strong>
                    <input Type="time" class=@($"form-control my-2 {Theme.BackColor} {Theme.FontColor}") @bind="@Movie.Length" />
                    <strong class="col-form-label my-1">Image</strong>
                    <InputFile class=@($"form-control my-2 {Theme.BackColor} {Theme.FontColor}" ) OnChange="@HandleSelected" accept="image/png, image/jpeg, image/jpg" />
                    @*<button type="submit" class="btn btn-primary my-2">Save</button>*@
                    <CustomBtn Classes="@("btn btn-primary my-2")"
                               Text="@("Save")"
                               Type="@("submit")">
                    </CustomBtn>
                </EditForm>
            </Authorized>
        </AuthorizeView>
    </div>
</div>
@code {
    SingleMovie Movie = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;
            if (!string.IsNullOrEmpty(Id))
                Movie = await MoviesService.GetMovie(Convert.ToDecimal(Id.Replace('O', '.')));
            IsLoading = false;
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    async Task Save()
    {
        try
        {
            IsLoading = true;
            Movie.IsNew = string.IsNullOrEmpty(Id) ? true : false;
            await MoviesService.SaveMovie(Movie);
            //NavigationManager.NavigateTo("/BoxOfficeDemo/Movies");
            ToastService.ShowSuccess("Saved Successfully");
            IsLoading = false;
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            //var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480);
            var buf = new byte[file.Size];
            using (var stream = file.OpenReadStream())
            {
                await stream.ReadAsync(buf);
            }
            Movie.Image = $"data:{file.ContentType};base64,{Convert.ToBase64String(buf)}";
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    [Parameter]
    public string? Id { get; set; }

}
