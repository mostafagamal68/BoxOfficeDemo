@page "/Movies/{id}"
@page "/BoxOfficeDemo/Movies/{id}"
@using Blazored.LocalStorage;
@using Microsoft.JSInterop.Implementation;
@using static BoxOfficeDemo.Client.Components.BreadCrumb;
@inject IMoviesService MoviesService
@inject IReviewsService ReviewsService
@inherits Pages.Index

<style>
    .image-card {
        width: auto !important;
    }
</style>

<PageTitle>Movie : @Movie.MovieName</PageTitle>
<Loader Toggle="IsLoading"></Loader>
<BreadCrumb Pages="@(new (){ new BreadCrmubData{PageName="Home"}, new BreadCrmubData{PageName="Movies", IsAuthorized=true}})" 
            CurrentPage="@(string.IsNullOrEmpty(Movie.MovieName) ? "New Movie" : Movie.MovieName)" />

<MovieCard MovieID="@Movie.MovieID"
           MovieName="@Movie.MovieName"
           MovieNameTooltip="@Movie.MovieName"
           Genere="@Movie.Genere"
           Image="@Movie.Image"
           Length="@Movie.Length"
           ParentalGuide="@Movie.ParentalGuide"
           Rate="@Movie.Rate"
           ReleasedDate="@Movie.ReleasedDate"
           AddWatchList="AddtoWatchLater"
           Index="false">
    <Description>
        <h5>@Movie.Description</h5>
        <h5><strong>Director: </strong>@Movie.Director</h5>
        <h5><strong>Writer: </strong>@Movie.Writer</h5>
        <h5><strong>Stars: </strong>@Movie.Stars</h5>
    </Description>
    <Reviews>
        <h4>Users Reviews</h4>
        @if (ReviewsService.ReviewsList.Any())
        {
            <div class="row">
                @foreach (var item in ReviewsService.ReviewsList)
                {
                    <div class="col-12 col-xl-3 col-lg-4 col-sm-6 card m-1 pt-3 roundedcorner @Theme.BackColor @Theme.BorderColor">
                        <div class="d-flex">
                            <p class="my-2"><strong>Name: </strong>@($"{item.FirstName} {item.LastName}")</p>
                            @if (item.UserID == LoggedUser.Id)
                            {
                                <CustomBtn ClickAction="async ()=> await Edit(item.ReviewID)">
                                    <SpanIcon><span class="@($"bi bi-pencil-fill {Theme.FontColor}")"></span></SpanIcon>
                                </CustomBtn>
                                <CustomBtn ClickAction="async ()=> await Delete(item.ReviewID)">
                                    <SpanIcon><span class="@($"bi bi-trash-fill {Theme.FontColor}")"></span></SpanIcon>
                                </CustomBtn>
                            }
                        </div>
                        <p class="my-2">
                            <strong>Rate: </strong>
                            @for (int stars = 1; stars <= item.Rate; stars++)
                            {
                                <span class="bi bi-star-fill"></span>
                            }
                        </p>
                        <p class="my-2"><strong>Feedback: </strong>@item.Feedback</p>
                        <p class="my-2"><strong>Date: </strong>@item.ReviewDate</p>
                    </div>
                }
            </div>
        }
        else
        {
            <h5>No Reviews</h5>
        }
    </Reviews>
    <ReviewForm>
        @if (!IsReviewed || IsEdit)
        {
            <EditForm Model="@Review" OnValidSubmit="Save">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <h4>Submit Your Review</h4>
                <div class="d-flex">
                    <label class="my-2">Rate </label>
                    <button type="button" class="btn"
                        @onmouseout="@(()=> SetRate("out",1))" @onmouseover="@(()=> SetRate("over",1))" @onclick="@(()=> SetRate("click",1))">
                        <span class="bi @firstStar" style="color:goldenrod;"></span>
                    </button>
                    <button type="button" class="btn"
                        @onmouseout="@(()=> SetRate("out",2))" @onmouseover="@(()=> SetRate("over",2))" @onclick="@(()=> SetRate("click",2))">
                        <span class="bi @secondStar" style="color:goldenrod;"></span>
                    </button>
                    <button type="button" class="btn"
                        @onmouseout="@(()=> SetRate("out",3))" @onmouseover="@(()=> SetRate("over",3))" @onclick="@(()=> SetRate("click",3))">
                        <span class="bi @thirdStar" style="color:goldenrod;"></span>
                    </button>
                    <button type="button" class="btn"
                        @onmouseout="@(()=> SetRate("out",4))" @onmouseover="@(()=> SetRate("over",4))" @onclick="@(()=> SetRate("click",4))">
                        <span class="bi @fourthStar" style="color:goldenrod;"></span>
                    </button>
                    <button type="button" class="btn"
                        @onmouseout="@(()=> SetRate("out",5))" @onmouseover="@(()=> SetRate("over",5))" @onclick="@(()=> SetRate("click",5))">
                        <span class="bi @fifthStar" style="color:goldenrod;"></span>
                    </button>
                </div>
                <div class="col-md-6">
                    <label>Feedback</label>
                    <InputTextArea class=@($"form-control col-md-6 {Theme.BackColor} {Theme.FontColor}") @bind-Value="Review.Feedback" />
                </div>
                <div class="d-flex my-3">
                    <button type="submit" class="btn btn-primary">Save</button>
                    @if (IsEdit)
                    {
                        <button class="btn btn-danger mx-2" @onclick="()=> IsEdit = false">Cancel</button>
                    }
                </div>
            </EditForm>
        }
    </ReviewForm>
</MovieCard>

@code {
    SingleMovie Movie = new();
    SingleReview Review = new();
    bool IsReviewed = false;
    bool IsEdit = false;
    string firstStar = "bi-star";
    string secondStar = "bi-star";
    string thirdStar = "bi-star";
    string fourthStar = "bi-star";
    string fifthStar = "bi-star";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;
            Movie = await MoviesService.GetMovie(Id.ToIdDecimal());
            await GetReviews();
            IsLoading = false;
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    async Task GetReviews()
    {
        await ReviewsService.GetReviews(Id.ToIdDecimal());
        IsReviewed = ReviewsService.ReviewsList.Where(w => w.UserID == LoggedUser.Id).Any();
    }

    async Task Save()
    {
        try
        {
            if (!IsReviewed)
            {
                Review.IsNew = true;
                Review.ReviewID = new GenerateNewID().GetNewID;
                Review.UserID = LoggedUser.Id;
                Review.MovieID = Id.ToIdDecimal();
                Review.ReviewDate = DateTime.Now;
                await ReviewsService.SaveReview(Review);
            }
            else
            {
                Review.IsNew = false;
                await ReviewsService.SaveReview(Review);
                IsEdit = false;
            }
            await GetReviews();
            Review = new();
            SetRate("", 0);
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    async Task Edit(decimal? id)
    {
        try
        {
            IsEdit = true;
            Review = await ReviewsService.GetSingleReview(id);
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    async Task Delete(decimal? id)
    {
        try
        {
            if (await JS.InvokeAsync<bool>("confirm", "Are you sure to delete your review?"))
            {
                await ReviewsService.DeleteReview(id);
                await GetReviews();
                Review = new();
                SetRate("", 0);
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }

    }

    void SetRate(string type, int? stars)
    {
        if (type == "out")
            stars = Review.Rate;
        switch (stars)
        {
            case 1:
                firstStar = "bi-star-fill";
                secondStar = "bi-star";
                thirdStar = "bi-star";
                fourthStar = "bi-star";
                fifthStar = "bi-star";
                break;
            case 2:
                firstStar = "bi-star-fill";
                secondStar = "bi-star-fill";
                thirdStar = "bi-star";
                fourthStar = "bi-star";
                fifthStar = "bi-star";
                break;
            case 3:
                firstStar = "bi-star-fill";
                secondStar = "bi-star-fill";
                thirdStar = "bi-star-fill";
                fourthStar = "bi-star";
                fifthStar = "bi-star";
                break;
            case 4:
                firstStar = "bi-star-fill";
                secondStar = "bi-star-fill";
                thirdStar = "bi-star-fill";
                fourthStar = "bi-star-fill";
                fifthStar = "bi-star";
                break;
            case 5:
                firstStar = "bi-star-fill";
                secondStar = "bi-star-fill";
                thirdStar = "bi-star-fill";
                fourthStar = "bi-star-fill";
                fifthStar = "bi-star-fill";
                break;
            default:
                firstStar = "bi-star";
                secondStar = "bi-star";
                thirdStar = "bi-star";
                fourthStar = "bi-star";
                fifthStar = "bi-star";
                break;
        }
        if (type == "click")
            Review.Rate = stars;

    }

    [Parameter]
    public string Id { get; set; }
}
