// <auto-generated />
using System;
using BoxOfficeDemo.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoxOfficeDemo.Server.Migrations
{
    [DbContext(typeof(BoxOfficeDBContext))]
    partial class BoxOfficeDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BoxOfficeDemo.Server.Models.Movie", b =>
                {
                    b.Property<decimal?>("MovieID")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Genere")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan?>("Length")
                        .HasColumnType("time");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentalGuide")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("ReleasedDate")
                        .HasColumnType("date");

                    b.Property<string>("Stars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Writer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MovieID");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieID = 0.00000001m,
                            Description = "A young woman is courted and swept off her feet, only to realize a gothic conspiracy is afoot.",
                            Director = "Jessica M. Thompson",
                            Genere = "Horror",
                            Image = "/images/TheInvitation.jpg",
                            Length = new TimeSpan(0, 1, 45, 0, 0),
                            MovieName = "The Invitation",
                            ParentalGuide = 13,
                            Rate = 5.3m,
                            ReleasedDate = new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = "Nathalie Emmanuel,Thomas Doherty,Stephanie Corneliussen",
                            Writer = "Blair Butler"
                        },
                        new
                        {
                            MovieID = 0.00000002m,
                            Description = "Five assassins aboard a fast moving bullet train find out their missions have something in common.",
                            Director = "David Leitch",
                            Genere = "Action",
                            Image = "/images/BulletTrain.jpg",
                            Length = new TimeSpan(0, 2, 7, 0, 0),
                            MovieName = "Bullet Train",
                            ParentalGuide = 15,
                            Rate = 7.5m,
                            ReleasedDate = new DateTime(2022, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = "Brad PittJoey, KingAaron, Taylor-Johnson",
                            Writer = "Zak Olkewicz"
                        },
                        new
                        {
                            MovieID = 0.00000003m,
                            Description = "A father and his two teenage daughters find themselves hunted by a massive rogue lion intent on proving that the Savanna has but one apex predator.",
                            Director = "Baltasar Kormákur",
                            Genere = "Drama",
                            Image = "/images/Beast.jpg",
                            Length = new TimeSpan(0, 1, 33, 0, 0),
                            MovieName = "Beast",
                            ParentalGuide = 16,
                            Rate = 5.9m,
                            ReleasedDate = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = "Liyabuya Gongo, Martin Munro, Daniel Hadebe",
                            Writer = "Ryan Engle"
                        },
                        new
                        {
                            MovieID = 0.00000004m,
                            Description = "After more than thirty years of service as one of the Navy's top aviators, Pete Mitchell is where he belongs, pushing the envelope as a courageous test pilot and dodging the advancement in rank that would ground him.",
                            Director = "Joseph Kosinski",
                            Genere = "Action",
                            Image = "/images/TopGunMaverick.jpg",
                            Length = new TimeSpan(0, 1, 33, 0, 0),
                            MovieName = "Top Gun: Maverick",
                            ParentalGuide = 13,
                            Rate = 8.5m,
                            ReleasedDate = new DateTime(2022, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = "Tom Cruise, Val Kilmer, Miles Teller",
                            Writer = "Jim Cash"
                        },
                        new
                        {
                            MovieID = 0.00000005m,
                            Description = "The Red Ribbon Army from Goku's past has returned with two new androids to challenge him and his friends.",
                            Director = "Tetsuro Kodama",
                            Genere = "Animation",
                            Image = "/images/DragonBallSuperSuperHero.jpg",
                            Length = new TimeSpan(0, 1, 40, 0, 0),
                            MovieName = "Dragon Ball Super: Super Hero",
                            ParentalGuide = 13,
                            Rate = 7.3m,
                            ReleasedDate = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = "Masako Nozawa, Toshio Furukawa, Yûko Minaguchi",
                            Writer = "Akira Toriyama"
                        },
                        new
                        {
                            MovieID = 0.00000006m,
                            Description = "Krypto the Super-Dog and Superman are inseparable best friends, sharing the same superpowers and fighting crime side by side in Metropolis. However, Krypto must master his own powers for a rescue mission when Superman is kidnapped.",
                            Director = "Jared Stern",
                            Genere = "Animation",
                            Image = "/images/DCLeagueofSuperPets.jpg/",
                            Length = new TimeSpan(0, 1, 45, 0, 0),
                            MovieName = "DC League of Super-Pets",
                            ParentalGuide = 7,
                            Rate = 7.6m,
                            ReleasedDate = new DateTime(2022, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = "Dwayne Johnson, Dwayne Johnson, Kate McKinnon",
                            Writer = "John Whittington"
                        },
                        new
                        {
                            MovieID = 0.00000007m,
                            Description = "A lonely scholar, on a trip to Istanbul, discovers a Djinn who offers her three wishes in exchange for his freedom.",
                            Director = "George Miller",
                            Genere = "Drama",
                            Image = "/images/ThreeThousandYearsofLonging.jpg",
                            Length = new TimeSpan(0, 1, 48, 0, 0),
                            MovieName = "Three Thousand Years of Longing",
                            ParentalGuide = 15,
                            Rate = 6.9m,
                            ReleasedDate = new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = "Tilda Swinton, Idris Elba, Pia Thunderbolt",
                            Writer = "Augusta Gore"
                        },
                        new
                        {
                            MovieID = 0.00000008m,
                            Description = "The untold story of one twelve-year-old's dream to become the world's greatest supervillain.",
                            Director = "Kyle Balda",
                            Genere = "Animation",
                            Image = "/images/MinionsTheRiseofGru.jpg",
                            Length = new TimeSpan(0, 1, 27, 0, 0),
                            MovieName = "Minions: The Rise of Gru",
                            ParentalGuide = 7,
                            Rate = 6.6m,
                            ReleasedDate = new DateTime(2022, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = "Steve Carell, Pierre Coffin, Alan Arkin",
                            Writer = "Matthew Fogel"
                        },
                        new
                        {
                            MovieID = 0.00000009m,
                            Description = "Thor enlists the help of Valkyrie, Korg and ex-girlfriend Jane Foster to fight Gorr the God Butcher, who intends to make the gods extinct.",
                            Director = "Taika Waititi",
                            Genere = "Action",
                            Image = "/images/ThorLoveandThunder.jpg",
                            Length = new TimeSpan(0, 1, 58, 0, 0),
                            MovieName = "Thor: Love and Thunder",
                            ParentalGuide = 13,
                            Rate = 6.7m,
                            ReleasedDate = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = "Chris Hemsworth, Natalie Portman, Christian Bale",
                            Writer = "Jennifer Kaytin Robinson"
                        },
                        new
                        {
                            MovieID = 0.00000010m,
                            Description = "A woman who raised herself in the marshes of the deep South becomes a suspect in the murder of a man she was once involved with.",
                            Director = "Olivia Newman",
                            Genere = "Drama",
                            Image = "/images/WheretheCrawdadsSing.jpg",
                            Length = new TimeSpan(0, 2, 5, 0, 0),
                            MovieName = "Where the Crawdads Sing",
                            ParentalGuide = 13,
                            Rate = 7.1m,
                            ReleasedDate = new DateTime(2022, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stars = "Daisy Edgar-Jones, Taylor John Smith, Harris Dickinson",
                            Writer = "Delia Owens"
                        });
                });

            modelBuilder.Entity("BoxOfficeDemo.Server.Models.Review", b =>
                {
                    b.Property<decimal?>("ReviewID")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MovieID")
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewID");

                    b.HasIndex("MovieID");

                    b.HasIndex("UserID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BoxOfficeDemo.Server.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cb5b3ced-a42a-413c-92f6-d18a242c2a5a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7da74241-3349-47b9-abbc-f33fd5d4b951",
                            Email = "admin@identity.com",
                            EmailConfirmed = false,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IDENTITY.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDmvUYOadxBA0HP7MZtNoqW9C/tkbckUFd8W5uccfjCx/Q1mTDrI08mp6KBwXUiwjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fc8a36c-1a47-42cf-bf36-036fd67c0c8e",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "b6c9180a-621c-4d6c-9827-6a8a1174fd81",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c8ad968-8dfe-4613-84f9-85f9d72fc2bf",
                            Email = "user@identity.com",
                            EmailConfirmed = false,
                            FirstName = "System",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IDENTITY.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEKcKP48uv4m6+Zvuw15O5yZMhYjYoj1qhkNv5mPJtDx4whPNouRmkyn7PKxGNa2loA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b6a2e2b-f113-4aac-b258-98139a028147",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("BoxOfficeDemo.Server.Models.WatchList", b =>
                {
                    b.Property<decimal>("MovieID")
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("MovieID");

                    b.HasIndex("UserID");

                    b.ToTable("WatchList");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "32ecd8d0-3110-40a1-beae-04d1a43aca34",
                            ConcurrencyStamp = "0cb45bf7-525c-47d6-8c53-98ada210d8c7",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        },
                        new
                        {
                            Id = "e532da13-62c4-4582-9d7a-834b080b2ac1",
                            ConcurrencyStamp = "94134a8a-fc7f-4b8c-a5a2-f127107ae26e",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "f58b5d1d-9cbd-4fd8-aa12-5ecd0c48b56a",
                            ConcurrencyStamp = "55ee84c6-f136-480b-83e3-127347ad2e04",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cb5b3ced-a42a-413c-92f6-d18a242c2a5a",
                            RoleId = "e532da13-62c4-4582-9d7a-834b080b2ac1"
                        },
                        new
                        {
                            UserId = "b6c9180a-621c-4d6c-9827-6a8a1174fd81",
                            RoleId = "f58b5d1d-9cbd-4fd8-aa12-5ecd0c48b56a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoxOfficeDemo.Server.Models.Review", b =>
                {
                    b.HasOne("BoxOfficeDemo.Server.Models.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieID");

                    b.HasOne("BoxOfficeDemo.Server.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoxOfficeDemo.Server.Models.WatchList", b =>
                {
                    b.HasOne("BoxOfficeDemo.Server.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxOfficeDemo.Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BoxOfficeDemo.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoxOfficeDemo.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxOfficeDemo.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoxOfficeDemo.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxOfficeDemo.Server.Models.Movie", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BoxOfficeDemo.Server.Models.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
